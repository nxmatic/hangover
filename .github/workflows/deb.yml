name: deb

on:
  workflow_dispatch:
    inputs:
      gha-runner-label:
        description: 'GitHub runner label on which performing the jobs'
        required: false
        default: 'ubuntu-latest'
        type: string
      os-list:
        description: 'Operating systems to build for (comma-separated)'
        required: false
        default: 'debian12'
        type: string
      bundle-list:
        description: 'packages to bundle (comma-separated)'
        required: false
        default: 'wine'
        type: string
  push:
    branches:
      - '**'
    paths-ignore:
      - 'benchmarks/**'
      - 'docs/**'
      - 'README.md'
  release:
    types: [published]

jobs:

  parms:
    runs-on: ${{ github.event.inputs.gha-runner-label || ( github.repository_owner == github.actor && 'self-hosted' ) || 'ubuntu-latest' }}
    outputs:
      runs-on: ${{ steps.env.outputs.runs-on }}
      os-list: ${{ steps.matrix.outputs.os-list }}
      bundle-list: ${{ steps.matrix.outputs.bundle-list }}
      deb: ${{ steps.deb.outputs.version }}
    steps:

    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event_name == 'workflow_dispatch' && inputs.ref || github.event.pull_request.head.ref }}
        fetch-depth: 0
        fetch-tags: true

    - id: env
      run: |
        cat <<EOF >> $GITHUB_OUTPUT
        runs-on=${{ runner.environment }}
        EOF

    - id: matrix
      run: |
        cat <<EOF >> $GITHUB_OUTPUT
        runs-on=${{ runner.environment }}
        os-list=$(jq -n --arg m "$OS_LIST" '$m | split(",")' | jq -c .)
        bundle-list=$(jq -n --arg b "$BUNDLE_LIST" '$b | split(",")' | jq -c .)
        EOF
      env:
        OS_LIST: ${{ github.event.inputs.matrix-os || 'debian12' }}
        BUNDLE_LIST: ${{ github.event.inputs.matrix-bundle || 'wine' }}

    - name: deb
      id: deb
      run: |
        # Get the most recent tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")

        # Get the full description (tag-distance-hash)
        FULL_DESCRIBE=$(git describe --tags --long 2>/dev/null || echo "")

        # Extract version components
        if [ -n "$FULL_DESCRIBE" ]; then
          VERSION=$(echo $FULL_DESCRIBE | sed -E 's/^hangover-//; s/-([0-9]+)-g([0-9a-f]+)$/+\1~\2/')
        else
          # Fallback if no tags exist
          COMMIT_HASH=$(git rev-parse --short HEAD)
          COMMIT_COUNT=$(git rev-list --count HEAD)
          VERSION="0.0.0+${COMMIT_COUNT}~${COMMIT_HASH}"
        fi

        # For release events, use the release tag
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#hangover-}"  # Remove 'hangover-' prefix if present
        fi

        echo "version=$VERSION" >> $GITHUB_OUTPUT


  foundations:
    needs: parms
    runs-on: ${{ needs.parms.outputs.runs-on }}
    strategy:
      matrix:
        os: ${{ fromJson(needs.parms.outputs.os-list) }}
    steps:

    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event_name == 'workflow_dispatch' && inputs.ref || github.event.pull_request.head.ref }}

    - name: free disk space
      run: |
        sudo swapoff -a
        sudo rm -f /swapfile
        sudo apt clean
        df -h

    - name: Cache build marker
      id: cache-marker
      uses: actions/cache@v4
      with:
        path: .foundation-build-marker
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles(format('.packaging/{0}/Dockerfile', matrix.os)) }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      if: steps.cache-marker.outputs.cache-hit != 'true'

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      if: steps.cache-marker.outputs.cache-hit != 'true'

    - name: Build and push foundation image
      run: |
        cp .packaging/${{ matrix.os }}/Dockerfile .
        docker buildx build --push -t ghcr.io/${{ github.repository }}/foundation${{ matrix.os }}:latest .
        echo "${{ github.sha }}" > .foundation-build-marker
      if: steps.cache-marker.outputs.cache-hit != 'true'

    - name: Update cache marker
      if: steps.cache-marker.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: .foundation-build-marker
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles(format('.packaging/{0}/Dockerfile', matrix.os)) }}

  fex-pe:
    needs: [parms, foundations]
    runs-on: ${{ needs.parms.outputs.runs-on }}
    if: contains(fromJson(needs.parms.outputs.bundle-list), 'fex-pe')
    env:
      HOVERSION: ${{ needs.parms.outputs.ho-version }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        
    - name: free disk space
      run: |
        sudo swapoff -a
        sudo rm -f /swapfile
        sudo apt clean
        df -h

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup packaging
      run: |
        cp -r .packaging/ubuntu2204/fexpe/* fex
        cp fex/LICENSE fex/DEBIAN/copyright
        sed -i "s|FROM foundation.*|FROM ghcr.io/${{ github.repository }}/foundation${{ matrix.os }}:latest as builder|" fex/Dockerfile
        sed -i "s/HOVERSION/${HOVERSION}/g" fex/Dockerfile
        sed -i "s/HOVERSION/${HOVERSION}/g" fex/DEBIAN/control
        sed -i "s/starting FEX based/starting FEX (Hangover ${HOVERSION}) based/g" fex/Source/Windows/ARM64EC/Module.cpp
        sed -i "s/starting FEX based/starting FEX (Hangover ${HOVERSION}) based/g" fex/Source/Windows/WOW64/Module.cpp
        cat fex/DEBIAN/copyright
        cat fex/Dockerfile
        cat fex/DEBIAN/control
        nproc

    - name: Build package
      run: cd fex; docker buildx build --load -t fexpe .

    - name: Extract package
      run: docker run --rm fexpe cat /opt/deb/hangover-libwow64fex_${{ env.HOVERSION }}_arm64.deb > hangover-libwow64fex_${{ env.HOVERSION }}_arm64.deb

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: hangover-libwow64fex_${{ env.HOVERSION }}_arm64.deb
        path: hangover-libwow64fex_${{ env.HOVERSION }}_arm64.deb


  qemu:
    needs: [parms, foundations]
    runs-on: ${{ needs.parms.outputs.runs-on }}
    env:
      HOVERSION: ${{ needs.parms.outputs.ho-version }}
    strategy:
      matrix:
        os: ${{ fromJson(needs.parms.outputs.os-list) }}
        include:
          - os: debian11
            codename: bullseye
          - os: debian12
            codename: bookworm
          - os: ubuntu2204
            codename: jammy
          - os: ubuntu2404
            codename: noble
          - os: ubuntu2410
            codename: oracular
    if: contains(fromJson(needs.parms.outputs.bundle-list), 'qemu')

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: free disk space
      run: |
        sudo swapoff -a
        sudo rm -f /swapfile
        sudo apt clean
        df -h

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup packaging
      run: |
        cp -r .packaging/${{ matrix.os }}/qemu/* qemu
        sed -i "s|FROM foundation.*|FROM ghcr.io/${{ github.repository }}/foundation${{ matrix.os }}:latest as builder|" qemu/Dockerfile
        sed -i "s/HOVERSION/${HOVERSION}/g" qemu/Dockerfile
        sed -i "s/HOVERSION/${HOVERSION}/g" qemu/DEBIAN/control
        cat qemu/Dockerfile
        cat qemu/DEBIAN/control
        nproc

    - name: Build package
      run: cd qemu; docker buildx build --load -t qemu${{ matrix.os }} .

    - name: Extract package
      run: docker run --rm qemu${{ matrix.os }} cat /opt/deb/hangover-libqemu_${{ env.HOVERSION }}~${{ matrix.codename }}_arm64.deb > hangover-libqemu_${{ env.HOVERSION }}~${{ matrix.codename }}_arm64.deb

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: hangover-libqemu_${{ env.HOVERSION }}~${{ matrix.codename }}_arm64.deb
        path: hangover-libqemu_${{ env.HOVERSION }}~${{ matrix.codename }}_arm64.deb


  wine:
    needs: [parms, foundations]
    runs-on: ${{ needs.parms.outputs.runs-on }}
    env:
      HOVERSION: ${{ needs.parms.outputs.ho-version }}
    strategy:
      matrix:
        os: ${{ fromJson(needs.parms.outputs.os-list) }}
    steps:

    - name: Set codename
      id: set-codename
      run: |
        case "${{ matrix.os }}" in
          debian11)
            echo "codename=bullseye" >> $GITHUB_OUTPUT
            ;;
          debian12)
            echo "codename=bookworm" >> $GITHUB_OUTPUT
            ;;
          ubuntu2204)
            echo "codename=jammy" >> $GITHUB_OUTPUT
            ;;
          ubuntu2404)
            echo "codename=noble" >> $GITHUB_OUTPUT
            ;;
          ubuntu2410)
            echo "codename=oracular" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "Unknown OS: ${{ matrix.os }}"
            exit 1
            ;;
        esac

    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: free disk space
      run: |
        sudo swapoff -a
        sudo rm -f /swapfile
        sudo apt clean
        df -h

    - name: Setup packaging
      run: |
        cp -r .packaging/${{ matrix.os }}/wine/* wine
        sed -i "s|FROM foundation.*|FROM ghcr.io/${{ github.repository }}/foundation${{ matrix.os }}:latest AS builder|" wine/Dockerfile
        sed -i "s/HOVERSION/${HOVERSION}/g" wine/Dockerfile
        cat wine/Dockerfile
        cat wine/debian/changelog
        nproc

    - name: Adjust changelog for intermediate
      if: github.event_name != 'release'
      run: |
        cp wine/debian/changelog wine/debian/changelog.old
        echo "hangover-wine (${HOVERSION}~${{ steps.codename.outputs.value }}) UNRELEASED; urgency=low" > wine/debian/changelog.entry
        echo "" >> wine/debian/changelog.entry
        echo "  * Intermediate build ${HOVERSION}~${{ matrix.codename }}" >> wine/debian/changelog.entry
        echo "" >> wine/debian/changelog.entry
        echo -n " -- André Zwing <nerv@dawncrow.de>  " >> wine/debian/changelog.entry
        LC_TIME=en_US.UTF-8 date "+%a, %d %b %Y %H:%M:%S %z" >> wine/debian/changelog.entry
        echo "" >> wine/debian/changelog.entry
        cat wine/debian/changelog.entry wine/debian/changelog.old > wine/debian/changelog
        rm wine/debian/changelog.entry wine/debian/changelog.old
        cat wine/debian/changelog

    - name: Adjust changelog for release
      if: github.event_name == 'release'
      run: |
        cp wine/debian/changelog wine/debian/changelog.old
        echo "hangover-wine (${HOVERSION}~${{ steps.codename.outputs.value }}) UNRELEASED; urgency=low" > wine/debian/changelog.entry
        echo "" >> wine/debian/changelog.entry
        echo "  * Release ${HOVERSION}~${{ steps.codename.outputs.value }}" >> wine/debian/changelog.entry
        echo "" >> wine/debian/changelog.entry
        echo -n " -- André Zwing <nerv@dawncrow.de>  " >> wine/debian/changelog.entry
        LC_TIME=en_US.UTF-8 date "+%a, %d %b %Y %H:%M:%S %z" >> wine/debian/changelog.entry
        echo "" >> wine/debian/changelog.entry
        cat wine/debian/changelog.entry wine/debian/changelog.old > wine/debian/changelog
        rm wine/debian/changelog.entry wine/debian/changelog.old
        cat wine/debian/changelog

    - name: Build package
      run: |
        cd wine
        docker buildx build --load --target=builder -t wine${{ matrix.os }}-builder .
        docker buildx build --load  -t wine${{ matrix.os }} .

    - name: Extract package
      run: docker run --rm wine${{ matrix.os }} cat /opt/hangover-wine_${{ env.HOVERSION }}~${{ steps.codename.outputs.value }}_arm64.deb > hangover-wine_${{ env.HOVERSION }}~${{ steps.codename.outputs.value }}_arm64.deb

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: hangover-wine_${{ env.HOVERSION }}~${{ steps.codename.outputs.value }}_arm64.deb
        path: hangover-wine_${{ env.HOVERSION }}~${{ steps.codename.outputs.value }}_arm64.deb


  bundle:
    needs: [parms, wine]
    env:
      HOVERSION: ${{ needs.parms.outputs.ho-version }}
    # needs: ${{ fromJson(needs.parms.outputs.bundle) }}
    runs-on: ${{ needs.parms.outputs.runs-on }}
    strategy:
      matrix:
        os: ${{ fromJson(needs.parms.outputs.os-list) }}
    steps:
    - name: Set codename
      id: set-codename
      run: |
        case "${{ matrix.os }}" in
          debian11)
            echo "codename=bullseye" >> $GITHUB_OUTPUT
            ;;
          debian12)
            echo "codename=bookworm" >> $GITHUB_OUTPUT
            ;;
          ubuntu2204)
            echo "codename=jammy" >> $GITHUB_OUTPUT
            ;;
          ubuntu2404)
            echo "codename=noble" >> $GITHUB_OUTPUT
            ;;
          ubuntu2410)
            echo "codename=oracular" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "Unknown OS: ${{ matrix.os }}"
            exit 1
            ;;
        esac
    - uses: actions/checkout@v4
    - name: free disk space
      run: |
        sudo swapoff -a
        sudo rm -f /swapfile
        sudo apt clean
        df -h

    - name: Download Artifacts 1/2
      uses: actions/download-artifact@v4
      with:
        pattern: hangover*${{ steps.codename.outputs.value }}_arm64.deb
        merge-multiple: true

    - name: Download Artifacts 2/2
      uses: actions/download-artifact@v4
      with:
        pattern: hangover-libwow64fex*_arm64.deb
        merge-multiple: true

    - name: Bundle
      run: tar -cf hangover_${{ env.HOVERSION }}_${{ matrix.os }}_${{ steps.codename.outputs.value }}_arm64.tar hangover*${{ steps.codename.outputs.value }}_arm64.deb #hangover-libwow64fex*_arm64.deb

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: hangover_${{ env.HOVERSION }}_${{ matrix.os }}_${{ steps.codename.outputs.value }}_arm64.tar
        path: hangover_${{ env.HOVERSION }}_${{ matrix.os }}_${{ steps.codename.outputs.value }}_arm64.tar
        retention-days: 14

    - name: Upload Artifact as Release Asset
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: hangover_${{ env.HOVERSION }}_${{ matrix.os }}_${{ steps.codename.outputs.value }}_arm64.tar
        asset_name: hangover_${{ env.HOVERSION }}_${{ matrix.os }}_${{ steps.codename.outputs.value }}_arm64.tar
        asset_content_type: application/x-tar
